import{_ as i,z as a,m as n,ap as h}from"./chunks/framework.bQJNM8pB.js";const t="/adapter-yunhupro/assets/2025-10-26_17-01-38.e3bS4DZI.png",l="/adapter-yunhupro/assets/2025-10-26_16-56-10.DjQHkho0.png",c=JSON.parse('{"title":"常见问题 (FAQ)","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/start/issues.md","filePath":"markdown/start/issues.md","lastUpdated":1761758479000}'),p={name:"markdown/start/issues.md"};function e(k,s,r,d,o,g){return n(),a("div",null,[...s[0]||(s[0]=[h('<h1 id="常见问题" tabindex="-1">常见问题 (FAQ) <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题 (FAQ)&quot;">​</a></h1><p>本页收集了用户在使用 <code>adapter-yunhupro</code> 时可能遇到的一些常见问题及其解决方案。</p><hr><h3 id="q1-机器人配置正确-但收不到任何消息-也没有任何反应。" tabindex="-1">Q1: 机器人配置正确，但收不到任何消息，也没有任何反应。 <a class="header-anchor" href="#q1-机器人配置正确-但收不到任何消息-也没有任何反应。" aria-label="Permalink to &quot;Q1: 机器人配置正确，但收不到任何消息，也没有任何反应。&quot;">​</a></h3><p><strong>检查 Webhook 配置</strong>:</p><ul><li>在云湖平台的机器人后台，仔细检查您填写的「订阅地址」是否正确。它应该是 <code>http(s)://你的公网地址:端口/path</code> 的完整形式。</li><li>确保「订阅地址」中的 <code>path</code> 与您在 Koishi 适配器配置中填写的 <code>path</code> 完全一致。</li></ul><p><strong>检查事件订阅</strong>:</p><ul><li>在云湖后台，确认您已经勾选了需要接收的事件，特别是「消息事件」。</li></ul><hr><h3 id="q2-我配置了多个机器人-但只有一个能工作。" tabindex="-1">Q2: 我配置了多个机器人，但只有一个能工作。 <a class="header-anchor" href="#q2-我配置了多个机器人-但只有一个能工作。" aria-label="Permalink to &quot;Q2: 我配置了多个机器人，但只有一个能工作。&quot;">​</a></h3><p><strong>A:</strong> 这是因为多个机器人实例共享了同一个 Webhook <code>path</code>。</p><ul><li><strong>解决方案</strong>: 在 Koishi 的适配器配置中，为您的每一个机器人设置一个<strong>唯一</strong>的 <code>path</code>。 <ul><li>例如：机器人 A 使用 <code>/yunhu/bot-a</code>，机器人 B 使用 <code>/yunhu/bot-b</code>。</li><li>修改后，记得也要去云湖后台更新每个机器人对应的「订阅地址」。</li></ul></li></ul><hr><h3 id="q3-机器人可以收到消息-但发送图片或文件失败。" tabindex="-1">Q3: 机器人可以收到消息，但发送图片或文件失败。 <a class="header-anchor" href="#q3-机器人可以收到消息-但发送图片或文件失败。" aria-label="Permalink to &quot;Q3: 机器人可以收到消息，但发送图片或文件失败。&quot;">​</a></h3><ul><li><strong>文件大小限制</strong>: 您尝试发送的文件可能超过了云湖平台的大小限制。请尝试发送一个较小的文件。</li></ul><hr><h3 id="q4-如何切换频道代理人。" tabindex="-1">Q4: 如何切换频道代理人。 <a class="header-anchor" href="#q4-如何切换频道代理人。" aria-label="Permalink to &quot;Q4: 如何切换频道代理人。&quot;">​</a></h3><ul><li><p><strong>Windows客户端限制</strong>: 由于在云湖平台的Windows客户端不能直接at机器人，导致我们无法发送 <code>@机器人 assign</code> 来切换频道代理人。</p></li><li><p><strong>解决方案</strong>: 在 Koishi 的 webUI 中，找到侧边栏的 <code>数据库</code> 按钮，点击进去修改<code>channel表</code>的对应的<code>assignee值</code>。</p></li></ul><ol><li><p>找到侧边栏的 <code>数据库</code> 按钮。</p></li><li><p>点击 <code>channel表</code>。</p></li><li><p>输入过滤条件，在<code>platform</code>输入<code>yunhu</code>，在<code>guildId</code>输入你希望修改的频道ID。</p></li><li><p>点击右上角的过滤按钮</p></li><li><p>确认有<code>group:</code>的前缀</p></li><li><p>双击修改对应的<code>assignee值</code><img src="'+t+'" alt="img"></p></li><li><p>双击对应的 <code>assignee值</code> 位置，然后输入你想要响应的<code>机器人的ID</code>。</p></li><li><p>点击右上角<code>应用修改</code><img src="'+l+`" alt="img"></p></li></ol><hr><h3 id="q5-如何在我的插件中调用云湖特有的-api" tabindex="-1">Q5: 如何在我的插件中调用云湖特有的 API？ <a class="header-anchor" href="#q5-如何在我的插件中调用云湖特有的-api" aria-label="Permalink to &quot;Q5: 如何在我的插件中调用云湖特有的 API？&quot;">​</a></h3><p><strong>A:</strong> 您可以通过 <code>bot</code> 对象实例来访问适配器封装的所有 API 方法。</p><ul><li><strong>示例</strong>: 在您的插件中，您可以通过 <code>session.bot</code> 来获取当前的 <code>Bot</code> 实例，然后调用其上的方法。</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;koishi&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;test-yunhu-api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;yunhu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;此命令仅适用于云湖平台。&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 调用获取用户信息的 API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">bot</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 调用发送消息的 API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">bot</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">channelId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;这是一条来自 API 调用的消息。&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;API 调用成功！&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;API 调用失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;API 调用失败，请检查日志。&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><ul><li>关于所有可用的 API 方法，请参考 <a href="./../dev/apis.html"><strong>开发文档 / APIs</strong></a> 章节。</li></ul><h3 id="q6-h-html-为什么发出的是图片" tabindex="-1">Q6 <code>h(&quot;html&quot;)</code>为什么发出的是图片？ <a class="header-anchor" href="#q6-h-html-为什么发出的是图片" aria-label="Permalink to &quot;Q6 \`h(&quot;html&quot;)\`为什么发出的是图片？&quot;">​</a></h3><p>解决方法见 <a href="./../dev/additional/4.html#html-消息">#html-消息</a></p>`,27)])])}const y=i(p,[["render",e]]);export{c as __pageData,y as default};
