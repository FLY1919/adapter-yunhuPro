import{_ as i,z as a,m as h,ap as t}from"./chunks/framework.bQJNM8pB.js";const c=JSON.parse('{"title":"功能限制与实现细节","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/dev/additional/4.md","filePath":"markdown/dev/additional/4.md","lastUpdated":1761537413000}'),n={name:"markdown/dev/additional/4.md"};function l(e,s,k,p,d,o){return h(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="功能限制与实现细节" tabindex="-1">功能限制与实现细节 <a class="header-anchor" href="#功能限制与实现细节" aria-label="Permalink to &quot;功能限制与实现细节&quot;">​</a></h1><h2 id="音视频格式转换" tabindex="-1">音视频格式转换 <a class="header-anchor" href="#音视频格式转换" aria-label="Permalink to &quot;音视频格式转换&quot;">​</a></h2><p>云湖的机器人接口不支持直接发送音频文件。此外，上传的视频必须包含有效的画面，否则消息可能无法正常显示。</p><p>为了解决这些问题，本适配器在处理音频文件时，会自动执行以下操作：</p><ul><li><strong>格式转换</strong>：调用 <code>ctx.ffmpeg</code> 将音频转换为视频格式。</li><li><strong>添加画面</strong>：在转换过程中，为视频添加一个纯色背景，以确保其能被正确渲染。</li></ul><h2 id="文件大小限制" tabindex="-1">文件大小限制 <a class="header-anchor" href="#文件大小限制" aria-label="Permalink to &quot;文件大小限制&quot;">​</a></h2><p>云湖对不同类型的文件有严格的上传大小限制：</p><ul><li><strong>图片</strong>：最大 10MB</li><li><strong>视频</strong>：最大 20MB</li><li><strong>其他文件</strong>：最大 20MB</li></ul><p>为了尽可能确保文件能成功发送，适配器会进行如下处理：</p><ul><li><strong>超限视频</strong>：如果视频大小超过 20MB，适配器会尝试使用 <code>ctx.ffmpeg</code> 对其进行一次压缩。如果压缩后的大小符合限制，则会发送；否则，操作将失败。</li><li><strong>超限图片和文件</strong>：适配器无法处理超限的图片或其他文件，将直接抛出错误。</li></ul><h2 id="图片资源访问" tabindex="-1">图片资源访问 <a class="header-anchor" href="#图片资源访问" aria-label="Permalink to &quot;图片资源访问&quot;">​</a></h2><p>直接访问云湖的图片 URL 会因为缺少 <code>Referer</code> 请求头而导致 <code>403 Forbidden</code> 错误。</p><p>您必须在请求中添加 <code>Referer: https://www.yhchat.com/</code> 头才能成功获取图片。</p><p>以下是一个使用 <code>curl</code> 访问图片的示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --location</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;https://chat-img.jwznb.com/a0068c6770fe2df08d1923287bb9cdbf.jpg&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">--header </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;Referer: https://www.yhchat.com/&#39;</span></span></code></pre></div><h2 id="额外接口的来源" tabindex="-1">额外接口的来源 <a class="header-anchor" href="#额外接口的来源" aria-label="Permalink to &quot;额外接口的来源&quot;">​</a></h2><p>本适配器提供的一些非官方额外接口，其实现逻辑来源于对以下几个 Web 页面的网络请求分析：</p><ul><li><code>https://www.yhchat.com/user/homepage/7756242</code></li><li><code>https://yhfx.jwznb.com/share?key=0FRmLHlPL47M&amp;ts=1761497803</code></li><li><code>https://yhfx.jwznb.com/share?key=m7Z4l2bLBWt2&amp;ts=1761497822</code></li></ul><h2 id="webhook-get-请求处理" tabindex="-1">Webhook GET 请求处理 <a class="header-anchor" href="#webhook-get-请求处理" aria-label="Permalink to &quot;Webhook GET 请求处理&quot;">​</a></h2><p>在设置 Webhook 监听地址时，为了方便用户确认该路径可被公网访问，适配器对 GET 请求进行了额外处理。</p><p>当您通过浏览器访问 Webhook 路径时，会看到一个说明页面，用于验证连通性。</p><h2 id="发送富文本消息" tabindex="-1">发送富文本消息 <a class="header-anchor" href="#发送富文本消息" aria-label="Permalink to &quot;发送富文本消息&quot;">​</a></h2><p>本适配器支持通过 Koishi 的 <code>h()</code> 函数 发送 Markdown 和 HTML 格式的消息。</p><h3 id="markdown-消息" tabindex="-1">Markdown 消息 <a class="header-anchor" href="#markdown-消息" aria-label="Permalink to &quot;Markdown 消息&quot;">​</a></h3><p>使用 <code>&lt;yunhu:markdown&gt;</code> 元素来发送 Markdown 格式的内容。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ctx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;md测试&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> markdownContent</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;# 你好</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">## 这是 Markdown！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;yunhu:markdown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">markdownContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;markdown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">markdownContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div><h3 id="html-消息" tabindex="-1">HTML 消息 <a class="header-anchor" href="#html-消息" aria-label="Permalink to &quot;HTML 消息&quot;">​</a></h3><p>使用 <code>&lt;html&gt;</code> 元素来发送 HTML 格式的内容。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ctx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;html测试&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> htmlContent</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;&lt;h1&gt;你好&lt;/h1&gt;&lt;h2&gt;这是 HTML！&lt;/h2&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;yunhu:html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">htmlContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> session</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">htmlContent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  });</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>注意！常见问题：为什么我复制了以上demo指令 <code>html测试</code>，为什么发出来的内容里有一个是图片呢？</strong></p><p>这是因为你的koishi用插件实现了 <code>component:html</code> 服务。此服务一般由 <code>puppeteer</code> 插件提供。</p><p>此时你有两个解决方法：</p><ul><li>不使用<code>h(&quot;html&quot;)</code>，改为使用<code>h(&quot;yunhu:html&quot;)</code></li><li>不使用puppeteer的<code>component:html</code> 服务。如果你不希望使用此服务。可以使用 <code>@shangxueink/puppeteer-without-canvas</code> 插件。</li></ul></div><h2 id="指令前缀兼容性" tabindex="-1">指令前缀兼容性 <a class="header-anchor" href="#指令前缀兼容性" aria-label="Permalink to &quot;指令前缀兼容性&quot;">​</a></h2><p>云湖平台的所有机器人指令都带有一个固定且不可修改的前缀 <code>/</code>。</p><p>为了确保在 Koishi 中定义的指令能够被正确触发，您必须将 <code>/</code> 添加到 Koishi 的指令前缀配置中。</p><blockquote><p>可以在 Koishi 控制台的“全局设置”下的 <code>prefix</code> 配置项中完成。</p></blockquote><h2 id="集成侧边栏" tabindex="-1">集成侧边栏 <a class="header-anchor" href="#集成侧边栏" aria-label="Permalink to &quot;集成侧边栏&quot;">​</a></h2><p>为了方便您在 Koishi 控制台中快速管理机器人，本适配器在侧边栏注册了一个云湖图标。</p><p>点击该图标，即可直接跳转到云湖的官方控制台，无需离开koishi控制台。</p>`,37)])])}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
